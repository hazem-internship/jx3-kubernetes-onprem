# Source: postegres/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postegres-postegres
  labels:
    draft: draft-app
    chart: "postegres-0.0.2"
    gitops.jenkins-x.io/pipeline: 'namespaces'
  annotations:
    meta.helm.sh/release-name: 'postegres'
    wave.pusher.com/update-on-config-change: 'true'
  namespace: jx-staging
spec:
  selector:
    matchLabels:
      app: postegres-postegres
  replicas: 1
  template:
    metadata:
      labels:
        draft: draft-app
        app: postegres-postegres
    spec:
      serviceAccountName: postegres-postegres
      initContainers:
      - name: init-db
        image: postgres:13.3
        command: ["bin/sh", "-c", "psql -a -U $DB_USER -h $DB_HOST -d $DB_NAME -f /data/init.sql"]
        env:
        - name: DB_HOST
          value: "myteam-demodb"
        - name: DB_NAME
          value: "demodb"
        - name: DB_USER
          value: "myowner"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: myowner.myteam-demodb.credentials.postgresql.acid.zalan.do
        volumeMounts:
        - mountPath: /data
          name: init-sql
      containers:
      - name: postegres
        image: "ghcr.io/hazem-internship/postegres:0.0.2"
        imagePullPolicy: IfNotPresent
        env:
        - name: VERSION
          value: 0.0.2
        - name: DB_HOST
          value: "myteam-demodb"
        - name: DB_NAME
          value: "demodb"
        - name: DB_USER
          value: "myowner"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: myowner.myteam-demodb.credentials.postgresql.acid.zalan.do
        envFrom: null
        ports:
        - name: http
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 400m
            memory: 256Mi
          requests:
            cpu: 200m
            memory: 128Mi
      terminationGracePeriodSeconds:
      imagePullSecrets:
      - name: "tekton-container-registry-auth"
      volumes:
      - name: init-sql
        configMap:
          name: demo-db-init-sql
