# NOTE this file is autogenerated - DO NOT EDIT!
#
# This file is generated from the template files via the command: 
#    jx gitops jenkins jobs
controller:
  JCasC:
    configScripts:
      jxsetup: |
        jobs:
          - script: |
              // from template: versionStream/jenkins/templates/folder.gotmpl
              folder('hazem-internship')
                            
              // from template: versionStream/jenkins/templates/job.gotmpl
              multibranchPipelineJob('hazem-internship/jenkinsfile') {
                  branchSources {
                      github {
                          id('hazem-internship-jenkinsfile')
                          scanCredentialsId('tekton-git')
                          repoOwner('hazem-internship')
                          repository('jenkinsfile')
                      }
                  }
                  configure { node ->
                    def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                    }
                  }
              }
                            
              // from template: versionStream/jenkins/templates/job.gotmpl
              multibranchPipelineJob('hazem-internship/spring1') {
                  branchSources {
                      github {
                          id('hazem-internship-spring1')
                          scanCredentialsId('tekton-git')
                          repoOwner('hazem-internship')
                          repository('spring1')
                      }
                  }
                  configure { node ->
                    def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                    }
                  }
              }
                            
              // from template: versionStream/jenkins/templates/job.gotmpl
              multibranchPipelineJob('hazem-internship/maven') {
                  branchSources {
                      github {
                          id('hazem-internship-maven')
                          scanCredentialsId('tekton-git')
                          repoOwner('hazem-internship')
                          repository('maven')
                      }
                  }
                  configure { node ->
                    def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                    }
                  }
              }
                            
              // from template: versionStream/jenkins/templates/job.gotmpl
              multibranchPipelineJob('hazem-internship/springboot-jenkins-multibranch-pipeline') {
                  branchSources {
                      github {
                          id('hazem-internship-springboot-jenkins-multibranch-pipeline')
                          scanCredentialsId('tekton-git')
                          repoOwner('hazem-internship')
                          repository('springboot-jenkins-multibranch-pipeline')
                      }
                  }
                  configure { node ->
                    def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                    }
                  }
              }
                            
